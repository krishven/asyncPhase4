common = import_da('common')
import time
import random

class Client(process):
	def setup(configFile:str,coIdMap:dict,clientId:dict): 
		self.resumeFlag = False 
		self.configHashMap={}

	def findCoordinator(obj):
		numCoordinators = int(configHashMap['numCoordinators'])
		index = int(obj)%numCoordinators
		return coIdMap[index]


	#Function which generates random list based on the number of requests
	def generateRandomList(objType):
		randList=[]
		i=0;
		numRequests = int(self.configHashMap['numRequests'])
		while (i<numRequests):
			tempList = self.configHashMap[objType]
			index = random.randint(0,len(tempList)-1)
			randList.append(tempList[index])
			i+=1

		return randList


	#Function to generate random list for each category	
	def generateRandomRequests():
		random.seed(self.configHashMap['randomSeed'])
		self.configHashMap['subjectId'] = generateRandomList('subjectId')
		self.configHashMap['resourceId'] = generateRandomList('resourceId')
		self.configHashMap['action'] = generateRandomList('action')
		self.configHashMap['coWaitTime'] = generateRandomList('coWaitTime')
		self.configHashMap['cliWaitTime'] = generateRandomList('cliWaitTime')
		self.configHashMap['uniqueId'] = generateRandomList('uniqueId')
		self.configHashMap['mightWriteObj'] = generateRandomList('mightWriteObj')

		# common.generateDefReadMap(configHashMap['subjectId'],configHashMap['resourceId'])
		# common.generateMightReadMap(configHashMap['subjectId'],configHashMap['resourceId'])
		# common.generateMightWriteMap(configHashMap['subjectId'],configHashMap['resourceId'],configHashMap['action'])


	def run():
		#read from config file
		self.configHashMap = common.readConfigFile(configFile)

		if('random' not in self.configHashMap):
			self.configHashMap['random']=0
		if(int(self.configHashMap['random'])==1):
			generateRandomRequests()

		subIdList = configHashMap['subjectId']
		resIdList = configHashMap['resourceId']
		actionList = configHashMap['action']
		numClients = int(configHashMap['numClients'])
		cliWaitTime = configHashMap['cliWaitTime']
		coWaitTime = configHashMap['coWaitTime']
		mightWriteObj = configHashMap['mightWriteObj']
		#mightWriteAttr = configHashMap['mightWriteAttr']
		#print("numreq",len(subIdList))

		i=clientId[self.id]%numClients
		while (i<len(subIdList)):
			time.sleep(int(cliWaitTime[i]))
			#print("Request send")
			appReq = common.AppRequest(subIdList[i],resIdList[i],actionList[i],coWaitTime[i],mightWriteObj[i],self.id)
			obj = common.findObject(appReq,1)
			coordinatorId = findCoordinator(obj)
			appReq.order = 1
			if(appReq.mightWriteObj!=0):
				appReq.type = 'WRITE_REQUEST'
				send(('WRITE_REQUEST',appReq,),to=coordinatorId)
			else:
				appReq.type = 'READ_REQUEST'
				send(('READ_REQUEST',appReq,),to=coordinatorId)
			await(self.resumeFlag)
			self.resumeFlag=False
			i+=numClients

	def receive(msg =("RESULT_RDONLY",req,), from_ = subCoId):
		output("RDONLY - RESULT:",req.updates['value'])
		self.resumeFlag = True

	def receive(msg =("RESULT_UPDATE",req,), from_ = subCoId):
		output("UPDATE - RESULT:",req.updates['value'])
		self.resumeFlag = True