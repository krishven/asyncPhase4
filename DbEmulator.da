common = import_da('common')

import random
import time
import pprint
import xml.etree.ElementTree as ET
import logging
import collections
import copy

database={}

class DbEmulator(process):
	def setup(configFile:str):
		self.dbObj = common.DbObject()
		self.configHashMap={}

	def run():	
		self.configHashMap = common.readConfigFile(configFile)
		database = initDB(configHashMap['dbFile'])
		self.dbObj.database = database
		await(False)

	def initDB(dbFile):
		#read from database.xml and store in memory cache
		subDatabase={}
		tree = ET.parse(dbFile)
		root = tree.getroot()
		ts=0
		for subj in root.iter('subject'):
			temp = {}
			for attrName, attrValue in subj.items():
				if attrName != 'id':
					temp[attrName] = attrValue
			subDatabase[subj.attrib['id']] = temp

		for res in root.iter('resource'):
			temp = {}
			for attrName, attrValue in res.items():
				if attrName != 'id':
					temp[attrName] = attrValue
			subDatabase[res.attrib['id']] = temp
		database[ts]=subDatabase	
		return database

	def receive(msg=('DB_READ',reqObject,), from_=srcId):
		#DB Read request
		tempDb = collections.OrderedDict(sorted(database.items()))
		for ts in tempDb:
			if(ts>reqObject.ts):
				break
			tsReq = ts

		self.dbObj.database = database[tsReq]			
		self.dbObj.reqObject = reqObject
		output('Read from database')
		#pp = pprint.PrettyPrinter(indent=4)
		#pp.pprint(self.dbObj.database)

		send(('DB_READ',self.dbObj,),to=srcId)
		#output("Sent content from DB (DB READ) to Worker {0}:".format(srcId),reqObject)

	def receive(msg=('DB_WRITE',reqObject,), from_=srcId):
		#DB Write request
		output("Received content in DB (COMMIT) from SC {0}:".format(srcId),reqObject,level=logging.DEBUG)
		#delay if latency specified
		if('dbLatency' in self.configHashMap):
			delay = int(self.configHashMap['dbLatency'])
			time.sleep(delay)
		
		tempDb = collections.OrderedDict(sorted(database.items()))
		for ts in tempDb:
			if(ts>reqObject.ts):
				break
			tsReq = ts			

		latestDb = copy.deepcopy(database[tsReq])
		obj = common.findObject(reqObject,reqObject.updateIndex)
		temp = latestDb[obj]

		temp[reqObject.updates['attrName']] = reqObject.updates['attrValue']
		latestDb[obj] = temp
		database[reqObject.ts]=latestDb

		output('Written to database')
		pp = pprint.PrettyPrinter(indent=4)
		pp.pprint(database[reqObject.ts])
		output("Database:",latestDb,level=logging.DEBUG)
		send(('DB_WRITE',reqObject),to=srcId)
