import time
import uuid
import random

configHashMap={}
objHashMap={}
requestMap={}
defReadMap={}
mightReadMap={}
mightWriteMap={}

def setDefRead(subList,resList,defReadVal,actionList):
	defReadList=[]

	valueList=defReadVal.replace("(","")
	valueList = valueList.split(')')
	i=0
	for item in valueList:
		if(item!=""):
			#print("h"+subList[i],resList[i])
			itemList=item.split(",")
			for subItem in itemList:
				if(subItem!=""):
					#print("k:"+subItem+":L")
					defReadList.append(subItem)
			
			defReadMap[(subList[i],resList[i],actionList[i])]=defReadList
			i+=1
			defReadList=[]

	# for key, value in defReadMap.items():
	#   	print(key,value)
	pass

def defReadAttr(obj,req):
	#print("def",defReadMap)
	if('random' in configHashMap and int(configHashMap['random'])==1):
		#print("random")
		value=[]
		value.append("viewCount")
	else:	
		value = defReadMap[(req.subId,req.resId,req.action)]
	#print(value)
	return value

def generateDefReadMap(subIdList,resIdList):
	randList=[]
	tempList = ['position','history','viewCount','type']
	for i in range(0,len(subIdList)):
		index = random.randint(0,len(tempList)-1)
		randList.append(tempList[index])
		defReadMap[(subIdList[i],resIdList[i])]=randList
	#print("defreadmap",defReadMap)		

def generateMightReadMap(subIdList,resIdList):
	randList=[]
	tempList = ['position','history','viewCount','type']
	for i in range(0,len(subIdList)):
		index = random.randint(0,len(tempList)-1)
		randList.append(tempList[index])
		mightReadMap[(subIdList[i],resIdList[i])]=randList

def generateMightWriteMap(subIdList,resIdList,actionList):
	randList=[]
	tempList = ['position','history','viewCount','type']
	for i in range(0,len(subIdList)):
		index = random.randint(0,len(tempList)-1)
		randList.append(tempList[index])
		mightWriteMap[(subIdList[i],resIdList[i],actionList[i])]=randList

def setMightRead(subList,resList,mightReadVal,actionList):
	mightReadList=[]

	valueList=mightReadVal.replace("(","")
	valueList = valueList.split(')')
	i=0
	for item in valueList:
		if(item!=""):
			#print("h"+subList[i],resList[i])

			itemList=item.split(",")
			for subItem in itemList:
				if(subItem!=""):
					#print("k:"+subItem+":L")
					mightReadList.append(subItem)
			mightReadMap[(subList[i],resList[i],actionList[i])]=mightReadList
			i+=1
			mightReadList=[]

	# for key, value in mightReadMap.items():
	#   	print(key,value)
	pass

def mightReadAttr(obj,req):
	if('random' in configHashMap and int(configHashMap['random'])==1):
		value=[]
		value.append("type")
	else:	
		value = mightReadMap[(req.subId,req.resId,req.action)]
	#print(value)
	return value


def setMightWriteAttr(subList,resList,mightWriteVal,actionList):

	valueList = mightWriteVal.split(',')
	i=0
	for item in valueList:
		mightWriteList=[]
		if(item!='0'):
			mightWriteList.append(item)
		
		mightWriteMap[(subList[i],resList[i],actionList[i])]=mightWriteList
		i+=1

	# for key, value in mightReadMap.items():
	#   	print(key,value)
	pass

def mightWriteAttr(req):
	if('random' in configHashMap and int(configHashMap['random'])==1):
		value=[]
		#value.append("viewCount")
	else:	
		value = mightWriteMap[(req.subId,req.resId,req.action)]
	#print(value)
	return value


#Function to read config file and store it in HashMap
def readConfigFile(fileName):
	with open(fileName) as f:
			lines = f.read().splitlines()
	for line in lines:
		temp = line.split("=")
		configHashMap[temp[0]]=temp[1] 

	#The following fields will be comma separated , split the fields based on comma and add to list 

	subIdList = configHashMap['subjectId'].split(',')	
	resIdList = configHashMap['resourceId'].split(',')
	uniqueIdList = configHashMap['uniqueId'].split(',')
	cliWaitTimeList = configHashMap['cliWaitTime'].split(",")
	coWaitTimeList = configHashMap['coWaitTime'].split(",")
	actionList = configHashMap['action'].split(",")
	mightWriteObjList = configHashMap['mightWriteObj'].split(",")


	if 'random' in configHashMap and int(configHashMap['random'])==1:
		pass
	else:		
		#print("not true",configHashMap['random'])
		setDefRead(subIdList,resIdList,configHashMap['defRead'],actionList)
		setMightRead(subIdList,resIdList,configHashMap['mightRead'],actionList)
		setMightWriteAttr(subIdList,resIdList,configHashMap['mightWriteAttr'],actionList)

	configHashMap['subjectId']=subIdList
	configHashMap['resourceId']=resIdList
	configHashMap['uniqueId']=uniqueIdList
	configHashMap['cliWaitTime']=cliWaitTimeList
	configHashMap['coWaitTime']=coWaitTimeList
	configHashMap['action']=actionList
	configHashMap['mightWriteObj']=mightWriteObjList
#	configHashMap['mightWriteAttr']=mightWriteAttrList

	return configHashMap


def findObject(appReq, order):

	if(appReq.mightWriteObj!=0):
			obj1=int(appReq.subId)+int(appReq.resId)-appReq.mightWriteObj
			obj2=appReq.mightWriteObj	
	else:			
		if(appReq.subId > appReq.resId):
			obj1 = appReq.subId
			obj2 = appReq.resId
		else:
			obj1 = appReq.resId
			obj2 = appReq.subId
				
	if(order == 1):
		return str(obj1)
	else:
		return str(obj2)

#App Request Object Class
class AppRequest():
	def __init__(self,subId,resId,action, waitTime,mightWriteObj,clientProcId):
		self.subId = subId
		self.resId = resId
		self.order = None
		self.type = None
		self.id = uuid.uuid4().hex
		self.cachedUpdates = {}
		self.ts = time.time()
		self.readAttr = []
		self.updateIndex = None
		self.rdOnlyIndex = None
		self.action = action
		self.clientId = clientProcId
		self.updates = None
		self.waitTime=int(waitTime)
		self.mightWriteObj=int(mightWriteObj)
		#self.mightWriteAttr=mightWriteAttr

	def __repr__(self):
		return "<ReqObj subId:%s resId:%s>" % (self.subId, self.resId)

	def __str__(self):
		return "ReqObject subId:%s, resID:%s action:%s, clientId:%s" % (self.subId, self.resId,self.action,self.clientId)
		

#Database Object Class
class DbObject():
	def __init__(self):
		self.reqObject=None
		self.database={}

	def __repr__(self):
		return "<DB db:%s>" % (self.database)

	def __str__(self):
		return "Database:%s" % (self.database)
